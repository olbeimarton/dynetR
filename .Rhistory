expanded_matrix[current_nodes, current_nodes] <- matrix[current_nodes, current_nodes]
expanded_matrix <- as.matrix(expanded_matrix)
return(expanded_matrix)
}
# Apply the expand_matrix function to each adjacency matrix in the list
expanded_matrices <- lapply(adj_matrices, expand_matrix, all_nodes = all_nodes)
return(expanded_matrices)
}
#' @title Helper function to create a union of multiple adjacency matrices
#' @description Builds a union adjacency matrix from a list of adjacency matrices
#' @param adj_matrices An input list of adjacency matrices
#'
.union_adjacency_matrices <- function(inlist) {
# List of input adjacency matrices
matrices <- inlist
# Get the union of all nodes across all matrices
all_nodes <- unique(unlist(lapply(matrices, rownames)))
# Create an empty adjacency matrix for the union
union_matrix <- matrix(0, nrow = length(all_nodes), ncol = length(all_nodes))
rownames(union_matrix) <- all_nodes
colnames(union_matrix) <- all_nodes
# Populate the union matrix with edges from each input matrix
for (adj in matrices) {
nodes <- rownames(adj)
for (i in seq_along(nodes)) {
for (j in seq_along(nodes)) {
if (adj[i, j] > 0) {
union_matrix[nodes[i], nodes[j]] <- 1
}
}
}
}
return(union_matrix)
}
#' @title Helper function to create a combined edgelist out of input adj. matrices
#' @description Builds an edgelist out of adj. matrices
#' @param adj_matrices An input  adjacency matrix
#'
.indata_to_edgelist <- function(ingraph){
g<-graph.adjacency(ingraph,weighted=TRUE)
out<-get.data.frame(g)
return(out)
}
#' Helper function to summarise matrices
.sumMatrices <- function(matrices) {
# Initialize a variable to hold the result
result <- matrix(0, nrow = nrow(matrices[[1]]), ncol = ncol(matrices[[1]]))
# Initialize a counter matrix with the same dimensions as the result matrix
counter <- matrix(0, nrow = nrow(result), ncol = ncol(result))
# Loop through the list of matrices and sum them
for (matrix in matrices) {
result <- result + matrix
counter <- counter + (matrix != 0)
}
# Divide the result matrix by the counter matrix element-wise
result <- result / counter
result[!is.finite(result)] <- 0
# Return the result
return(result)
}
#' Helper function to get the square values of the values in the list of matrices
.squareMatrices <- function(matrices) {
# Initialize a list to hold the squared matrices
squared_matrices <- list()
# Loop through the list of matrices and square each one
for (matrix in matrices) {
squared_matrices[[length(squared_matrices) + 1]] <- matrix^2
}
# Return the list of squared matrices
return(squared_matrices)
}
#' Helper function to calculate the centroid distances
.centroidDistance <- function(matrices) {
result <- list()
for (matrixx in matrices) {
result[[length(result) + 1]] <- sqrt(rowSums(matrixx))
}
return(result)
}
# Helper function to format matrix for structural rewiring
.structure_format <- function(inmat){
outmat <- ifelse(inmat!=0,1,inmat)
return(outmat)
}
#' @title Calculate the DyNet rewiring values for multiple graphs (adjacency matrices)
#'
#' @description Calculates the Dn rewiring values for the nodes included in the networks
#' as described in `Goenawan et al., 2016.`
#' @import igraph
#' @import readr
#' @import ggplot2
#' @import ggraph
#' @import tidygraph
#' @import dplyr
#' @import tibble
#' @import Matrix
#' @param matrix_list List of adjacency matrices corresponding to the input networks.
#' @param structure_only Logical, replaces non-zero adj. matrix values with 1. Default is FALSE.
#'
#' @export
dynetR <- function(matrix_list, structure_only = FALSE) {
# Format input data
matrix_list <- format_indata(matrix_list)
# Replace with 0 / 1 if structural rewiring only
if (structure_only) {
matrix_list_str <- lapply(matrix_list, .structure_format)
} else {
matrix_list_str <- matrix_list
}
# Match matrix sizes
expanded_matrices <- .expand_adjacency_matrices(matrix_list_str)
# Calculate non-zero means of matrices
nonZeroMean <- .sumMatrices(expanded_matrices)
# Calculate standardized weights (divided by non-zero means)
standardised <- lapply(expanded_matrices, "/", nonZeroMean)
standardisedNoNan <- lapply(standardised, function(x) replace(x, is.nan(x), 0))
# Calculate centroids of all node states by summing
standardSums <- Reduce("+", standardisedNoNan)
# Calculate Euclidean distance from node to centroid
centroid <- standardSums / length(standardisedNoNan)
# Subtract centroid values from standardized matrix
standardMinusCentroid <- lapply(standardisedNoNan, "-", centroid)
sqr <- .squareMatrices(standardMinusCentroid)
centDist <- .centroidDistance(sqr)
centDistBound <- do.call(rbind, centDist)
centFinalDist <- colSums(centDistBound)
rewiring <- centFinalDist / (length(centDist) - 1)
# Calculate degree and correct for it
unimatrix <- .union_adjacency_matrices(matrix_list_str)
unimatrix_dataframe <- graph_from_adjacency_matrix(unimatrix, mode = "undirected", diag = TRUE) |>
degree(mode = "all") |>
as.data.frame() |>
rownames_to_column()
# Note that in the case of undirected graphs, an edge that starts and ends at the same node
# increases the corresponding degree value by 2 (i.e., it is counted twice)
unimatrix_dataframe <- unimatrix_dataframe |>
rename("name" = "rowname", "degree" = `degree(graph_from_adjacency_matrix(unimatrix, mode = "undirected", diag = TRUE), mode = "all")`) |>
tibble()
rewiring <- rewiring |>
as.data.frame() |>
tibble::rownames_to_column() |>
rename("name" = "rowname")
output_dataframe <- left_join(rewiring, unimatrix_dataframe, by = "name") |>
mutate(degree_corrected_rewiring = rewiring / degree)
# Return only the output_dataframe
return(output_dataframe)
}
#' @title Visualize the DyNet rewiring results
#'
#' @description Generates a network graph visualization based on the output from `dynetR`.
#' @import igraph
#' @import ggraph
#' @import tidygraph
#' @import ggplot2
#' @import dplyr
#' @param matrix_list List of adjacency matrices corresponding to the input networks.
#' @param output_dataframe Dataframe output from the `dynetR` function.
#' @param structure_only Logical, should match the `structure_only` parameter used in `dynetR`. Default is FALSE.
#'
#' @export
dynetR_plot <- function(matrix_list, output_dataframe, structure_only = FALSE) {
# Format input data
matrix_list <- format_indata(matrix_list)
# Replace with 0 / 1 if structural rewiring only
if (structure_only) {
matrix_list_str <- lapply(matrix_list, .structure_format)
} else {
matrix_list_str <- matrix_list
}
# Generate unimatrix
unimatrix <- .union_adjacency_matrices(matrix_list_str)
unimatrix_graph <- graph_from_adjacency_matrix(unimatrix, mode = "undirected", diag = TRUE) |>
as_tbl_graph() |>
activate(nodes) |>
left_join(output_dataframe, by = "name") |>
ggraph(layout = "nicely") +
geom_edge_link(
start_cap = circle(3, 'mm'),
end_cap = circle(3, "mm"),
width = 1,
alpha = 0.5
) +
geom_node_point(aes(fill = rewiring, size = degree), shape = 21) +
scale_fill_distiller(palette = "Reds", direction = 1) +
geom_node_text(
aes(label = name, size = degree),
repel = TRUE,
fontface = "bold",
max.overlaps = 15
) +
scale_size_continuous(range = c(6, 10)) +
theme_graph()
return(unimatrix_graph)
}
#' @title Small multiples plot
#'
#' @description Draws a small multiples plot from the input networks focussing on a specific node
#' @import igraph
#' @import readr
#' @import ggplot2
#' @import ggraph
#' @import tidygraph
#' @import dplyr
#' @import tibble
#' @import Matrix
#' @param matrix_list List of named adjacency matrices corresponding to the input networks, same as input to dynetR.
#' @param focus_node Character, name of node to focus visualisation on.
#'
#' @export
small_multiples_plot <- function(input_list, focus_node){
# data for small multiples plot
# format input data
matrix_list <- format_indata(input_list)
ellist<-lapply(matrix_list, .indata_to_edgelist)
long_df <- dplyr::bind_rows(ellist,.id = "id") |> dplyr::tibble()
small_mult<-long_df |> dplyr::select(from,to, id) |> distinct() |> dplyr::filter(paste0(focus_node) %in% from | paste0(focus_node) %in% to) |>
as_tbl_graph() |>
activate(nodes) |>
mutate(hl = case_when(
name %in% paste0(focus_node) ~ 'Focus node',
TRUE ~ 'Other nodes'
)
) |>
ggraph(layout='linear', circular = T)+
geom_edge_link(start_cap = circle(3, 'mm'), end_cap = circle(3, "mm"), width =1, alpha = 0.3)+
geom_node_point(aes(color = hl), size =5, show.legend = T)+
geom_node_text(aes(label = name), repel = T, fontface = "bold", max.overlaps = 15) +
facet_edges(~id)+
theme_graph()+labs(color = 'Node status')
return(small_mult)
}
#' Helper function to pretty print matrices
.mat_op_print <- function(..., width = 0) {
# get arguments
args <- list(...)
chars <- sapply(args, is.character)
# auxilliary function to create character of n spaces
spaces <- function(n) paste(rep(" ", n), collapse = "")
# convert vectors to row matrix
vecs <- sapply(args, is.vector)
args[vecs & !chars] <- lapply(args[vecs & !chars], function(v) matrix(v, ncol = 1))
# convert all non-characters to character with format
args[!chars] <- lapply(args[!chars], format, width = width)
# print names as the first line, if present
arg_names <- names(args)
if (!is.null(arg_names)) {
get_title <- function(x, name) {
if (is.matrix(x)) {
paste0(name, spaces(sum(nchar(x[1, ])) + ncol(x) - 1 - nchar(name)))
} else {
spaces(nchar(x))
}
}
cat(mapply(get_title, args, arg_names), "\n")
}
# auxiliary function to create the lines
get_line <- function(x, n) {
if (is.matrix(x)) {
if (nrow(x) < n) {
spaces(sum(nchar(x[1, ])) + ncol(x) - 1)
} else {
paste(x[n, ], collapse = " ")
}
} else if (n == 1) {
x
} else {
spaces(nchar(x))
}
}
# print as many lines as needed for the matrix with most rows
N <- max(sapply(args[!chars], nrow))
for (n in 1:N) {
cat(sapply(args, get_line, n), "\n")
}
}
#' Helper function that prints the results of the subsequent steps
.dynet_verbose <- function(matrix_list) {
# format input data
matrix_list <- format_indata(matrix_list)
# Match matrix sizes
expanded_matrices <- .expand_adjacency_matrices(matrix_list)
# get union matrix
matrix_union <- .union_adjacency_matrices(expanded_matrices)
# Calculate non-zero means of matrices
nonZeroMean <- .sumMatrices(expanded_matrices)
# Calculate standardised weights (divided by non-zero means)
standardised <- lapply(expanded_matrices, "/", nonZeroMean)
standardisedNoNan <- lapply(standardised, function(x) replace(x, is.nan(x), 0))
# Calculate centroids of all node states by summing and subsequent division
standardSums <- Reduce("+", standardisedNoNan)
centroid <- standardSums / length(standardisedNoNan)
# Subtract centroid values from standardised matrix
standardMinusCentroid <- lapply(standardisedNoNan, "-", centroid)
sqr <- .squareMatrices(standardMinusCentroid)
centDist <- .centroidDistance(sqr)
centDistBound <- do.call(rbind, centDist)
# print(centDistBound)
centFinalDist <- colSums(centDistBound)
print(length(centFinalDist))
rewiring <- centFinalDist / (length(centDist) - 1)
print("Input matrices:")
.mat_op_print(A = matrix_list[[1]], " , ", B = matrix_list[[2]])
print("Non-zero mean:")
print(nonZeroMean)
print("Standardised weights (divided by non-zero means:")
.mat_op_print(A = standardisedNoNan[[1]], " , ", B = standardisedNoNan[[2]])
print("Centroid:")
print(centroid)
print("Standardised weight - centroid")
.mat_op_print(A = standardMinusCentroid[[1]], " , ", B = standardMinusCentroid[[2]])
print("Square of standard minus centroid")
.mat_op_print(A = sqr[[1]], " , ", B = sqr[[2]])
print("Square root of standard minus centroid row sums")
print(centDistBound)
print("Final rewiring value")
print(rewiring)
print(matrix_union)
}
# Jaccard Index Function for Adjacency Matrices
.jaccard_index <- function(adj1, adj2) {
# adj1 and adj2 are adjacency matrices
# Extract edges from the adjacency matrices
# For directed graphs, consider all non-zero entries
edges1 <- which(adj1 != 0, arr.ind = TRUE)
edges2 <- which(adj2 != 0, arr.ind = TRUE)
# Convert edges to data frames for merging
set1 <- as.data.frame(edges1)
set2 <- as.data.frame(edges2)
# Combine both sets of edges and find unique edges (Union)
union_set <- unique(rbind(set1, set2))
# Find the intersection of edges
intersection_set <- merge(set1, set2, by = c("row", "col"))
# Jaccard index calculation
jaccard <- nrow(intersection_set) / nrow(union_set)
return(jaccard)
}
#' @title Calculate Jaccard Indices
#'
#' @description Function to Calculate Jaccard Indices for a List of Networks. Returns a matrix containing the Jaccard indexes for all compared networks in the list.
#' @import igraph
#' @import readr
#' @import ggplot2
#' @import ggraph
#' @import tidygraph
#' @import dplyr
#' @import tibble
#' @import Matrix
#' @param networks List of named adjacency matrices corresponding to the input networks, same as input to dynetR.
#' @param focus_node Character, name of node to focus visualisation on.
#'
#' @export
calculate_jaccard_indices <- function(networks) {
networks <- format_indata(networks)
# networks: a list of adjacency matrices
n <- length(networks)
# Get or assign network names
if (is.null(names(networks))) {
network_names <- paste0("Network_", seq_len(n))
} else {
network_names <- names(networks)
}
# Initialize a matrix to store Jaccard indices
jaccard_matrix <- matrix(0, n, n)
colnames(jaccard_matrix) <- network_names
rownames(jaccard_matrix) <- network_names
# Calculate Jaccard indices for all pairs of networks
for (i in 1:n) {
for (j in i:n) {
jaccard_value <- .jaccard_index(networks[[i]], networks[[j]])
jaccard_matrix[i, j] <- jaccard_value
jaccard_matrix[j, i] <- jaccard_value  # Since the Jaccard index is symmetric
}
}
return(jaccard_matrix)
}
#' @title Compare targeting
#'
#' @description Function to Calculate differential targeting values for all compared networks. Returns a dataframe containing the compared node, networks, targeting values, absoulte difference and log2 ratio of targeting values.
#' @import igraph
#' @import readr
#' @import ggplot2
#' @import ggraph
#' @import tidygraph
#' @import dplyr
#' @import tibble
#' @import Matrix
#' @param input_list List of named adjacency matrices corresponding to the input networks, same as input to dynetR.
#'
#' @export
compare_targeting <- function(input_list) {
# Format the input data
formatted_matrix_list <- format_indata(input_list)
# Compute targeting measures for each network
targeting_list <- lapply(seq_along(formatted_matrix_list), function(i) {
adj_matrix <- formatted_matrix_list[[i]]
# Convert adjacency matrix to an igraph object with weights
g <- graph_from_adjacency_matrix(adj_matrix, mode = 'directed', weighted = TRUE)
# Convert to tbl_graph for tidygraph operations
g_tbl <- as_tbl_graph(g)
# Compute in-degree centrality (targeting) with weights
df <- g_tbl %>%
activate(nodes) %>%
mutate(targeting = centrality_degree(mode = 'in', weights = weight)) %>%
as_tibble()
# Add network identifier
df$network_id <- i
return(df[, c('name', 'targeting', 'network_id')])
})
# Combine all targeting data into one long dataframe
all_targeting <- bind_rows(targeting_list)
# Generate all unique pairs of networks
pairs <- combn(unique(all_targeting$network_id), 2)
# Initialize a list to store comparison results
result_list <- list()
# Compare targeting measures for each pair of networks
for (k in 1:ncol(pairs)) {
i <- pairs[1, k]
j <- pairs[2, k]
df_i <- all_targeting %>% filter(network_id == i)
df_j <- all_targeting %>% filter(network_id == j)
# Merge dataframes on 'name' and calculate deltaTargeting
df_compare <- df_i %>%
inner_join(df_j, by = 'name', suffix = c('_i', '_j')) %>%
mutate(
compared_networks = paste0(i, '_vs_', j),
targetingNet1 = paste0(targeting_i),
targetingNet2 = paste0(targeting_j),
deltaTargeting = abs(targeting_i - targeting_j),
log2TargetingFC = log2(targeting_i / targeting_j)
) %>%
select(name, compared_networks,targetingNet1,targetingNet2, deltaTargeting,,log2TargetingFC)
# Store the comparison result
result_list[[k]] <- df_compare
}
# Combine all comparison results into one dataframe
all_results <- bind_rows(result_list)
return(all_results)
}
roxygenise()
load_all()
devtools::load_all()
roxygenise()
devtools::document()
roxygen2::roxygenise()
devtools::install()
dynetR::dynetR_plot()
m1 <- matrix(rnorm(36, mean = 5), nrow = 6,  dimnames = list(c("A", "B","C","D","E","F"),
c("A", "B","C","D","E","F")))
m2 <- matrix(rnorm(36, mean = 5), nrow = 6,  dimnames = list(c("A", "B","C","D","E","F"),
c("A", "B","C","D","E","F")))
m3 <- matrix(rnorm(36, mean = 5), nrow = 6,  dimnames = list(c("A", "B","C","D","E","F"),
c("A", "B","C","D","E","F")))
m4 <- matrix(rnorm(36, mean = 5), nrow = 6,  dimnames = list(c("A", "B","C","D","E","F"),
c("A", "B","C","D","E","F")))
m5 <- matrix(rnorm(9, mean = 5), nrow = 3,  dimnames = list(c("A", "B","C"), c("A", "B","C")))
mList <- list('a' = m1, 'b' = m2, 'c' = m3, 'd' = m4, 'e' = m5)
output<-dynetR(mList)
dynetR_plot(mList, output)
devtools::document()
roxygen2::roxygenise()
devtools::install()
el1 <- data.frame(from = c('0','1','2','3','4'),
to = c('1','0','3','4','0'),
weight= c(1,1,1,1,1))
el2 <- data.frame(from = c('1','0','2','4','3'),
to = c('0','0','2','4','1'),
weight= c(1,1,1,1,1))
el3 <- data.frame(from = c('1','2','4','3','0'),
to = c('1','0','3','4','0'),
weight= c(1,1,1,1,1))
mList1 <- list('a' = el1, 'b' = el2,'c' = el3)
output<-dynetR(mList1)
output |> as_tibble_row()
output |> as_tibble()
output |> as_tibble()
View(output)
output<-dynetR(mList1, structure_only = T)
devtools::document()
roxygen2::roxygenise()
devtools::install()
el1 <- data.frame(from = c('0','1','2','3','4'),
to = c('1','0','3','4','0'),
weight= c(1,1,1,1,1))
el2 <- data.frame(from = c('1','0','2','4','3'),
to = c('0','0','2','4','1'),
weight= c(1,1,1,1,1))
el3 <- data.frame(from = c('1','2','4','3','0'),
to = c('1','0','3','4','0'),
weight= c(1,1,1,1,1))
mList1 <- list('a' = el1, 'b' = el2,'c' = el3)
output<-dynetR(mList1)
output
output<-dynetR(mList1,structure_only = T)
output<-dynetR(mList1,structure_only = T)
output
devtools::document()
roxygen2::roxygenise()
devtools::install()
el1 <- data.frame(from = c('0','1','2','3','4'),
to = c('1','0','3','4','0'),
weight= c(1,1,1,1,1))
el2 <- data.frame(from = c('1','0','2','4','3'),
to = c('0','0','2','4','1'),
weight= c(1,1,1,1,1))
el3 <- data.frame(from = c('1','2','4','3','0'),
to = c('1','0','3','4','0'),
weight= c(1,1,1,1,1))
mList1 <- list('a' = el1, 'b' = el2,'c' = el3)
output<-dynetR(mList)
output<-dynetR(mList1)
load_all()
library(dynetR)
